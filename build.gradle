import org.gradle.platform.base.internal.ToolSearchBuildAbility



// 通过扩展属性统一依赖的管理，扩展属性还可以定义任何你可能会使用到的属性
ext {
    depVersion = [
            lombok                      : "1.18.24",
            // gradle 或者说 groovy对中划线的解析不是很好，这里如果不加引号会报错，使用的时候也要使用map[key]形式使用，否则还是会报错
            //建议转成驼峰写法
            "forest-spring-boot-starter": "1.5.24",
            mybatisPlus                 : "3.5.2",
            log4j                       : "2.18.0",
            jansi                       : "2.4.0",
            commonsLang3                : "3.12.0",
            hutool                      : "5.8.4",
            "mybatis-enhance-actable"   : "1.5.0.RELEASE",
            mysql                       : "8.0.29",
            druidSpringBootStart        : "1.2.11"
    ]
}


allprojects {
    //java 插件时gradle内部自带的插件，不需要引入依赖
    apply plugin: "java"



    //基本JDK配置sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding "UTF-8"
    compileTestJava.options.encoding "UTF-8"

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    group "com.xx"
    version "1.0-SNAPSHOT"

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/central" }
        maven { url "https://maven.aliyun.com/repository/google" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        mavenCentral()
    }

    //依赖的配置:设置通用的依赖
    dependencies {
        // 解决使用gradle引入lombok后编译失败（不识别相关注解和log等问题）
        compileOnly "org.projectlombok:lombok:$depVersion.lombok"
        annotationProcessor "org.projectlombok:lombok:$depVersion.lombok"

        testCompileOnly "org.projectlombok:lombok:$depVersion.lombok"
        testAnnotationProcessor "org.projectlombok:lombok:$depVersion.lombok"
    }
    test {
        useJUnitPlatform()
    }
}
