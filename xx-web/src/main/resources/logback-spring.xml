<!--debug="true" : 打印 logback 内部状态（默认当 logback 运行出错时才会打印内部状态 ）, 配置该属性后打印条件如下（同时满足）：
    1、找到配置文件 2、配置文件是一个格式正确的xml文件 也可编程实现打印内部状态, 例如： LoggerContext lc = (LoggerContext)
    LoggerFactory.getILoggerFactory(); StatusPrinter.print(lc); -->
<!-- scan="true" ： 自动扫描该配置文件，若有修改则重新加载该配置文件 -->
<!-- scanPeriod="30 seconds" : 配置自动扫面时间间隔（单位可以是：milliseconds, seconds, minutes
    or hours，默认为：milliseconds）， 默认为1分钟，scan="true"时该配置才会生效 -->
<configuration debug="false" scan="false" scanPeriod="60 seconds">
    <!-- 设置变量。定义变量后，可以使“${}”来使用变量。 -->
    <property name="LOG_HOME" value="./logs/logback"/>
    <property name="sql_log_level" value="info"/>


    <!--从springboot 配置文件中读取属性值 scope表示作用域， name为变量名称，source指定springboot配置文件中的某个配置项，defaultValue表示没有读取到对应配置时的默认值-->
    <springProperty scope="context" name="appName" source="spring.application.name"  defaultValue="app"/>

    <!-- 设置 logger context 名称,一旦设置不可改变，默认为default -->
    <contextName>myAppName</contextName>

    <!-- 定义控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder 和 layout 选用一个即可，不过自0.9.19版本之后，极力推荐使用encoder-->
        <!-- encoder class为空时, 默认也为 ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出，并美化日（加颜色） 其中%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <!--支持的颜色字符编码 %black 黑色、 %red 红色、 %green 绿色、 %yellow 黄色、 %blue 蓝色、 %magenta 洋红色、 %cyan 青色、 %white 白色、 %gray 灰色
            以下为对应加粗的颜色代码 %boldRed、 %boldGreen、 %boldYellow、 %boldBlue、 %boldMagenta、 %boldCyan、 %boldWhite、 %highlight 高亮色-->
            <pattern>%boldGreen(${appName})-%red(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) %red([%thread]) %boldMagenta(%logger{50}) %cyan(%msg%n)</pattern>
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - [%juc.thread] - %-5level - %logger{50} - %msg%n</pattern>-->
            <!--<pattern>%d{HH:mm:ss.SSS} [%juc.thread] %-5level %logger{36} - %msg%n</pattern>-->
        </encoder>

        <!--<layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%clr(%d{yyyy-MM-dd HH:mm:ss.SSS} - [%juc.thread] - %-5level - %logger{50} - %msg%n)</pattern>
        </layout>-->
    </appender>

    <!--日志按照时间滚动生成滚动生成info级别的日志-->
    <appender name="LOG_FILE_INFO_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定当前活跃的日志文件的名称 -->
        <file>${LOG_HOME}/${appName}-info.log</file>

        <!--过滤器，以当前配置为例，level配置的是info, onMatch配置的是ACCEPT则表示如果日志级别时info就打印，onMismatch配置的事DENY 则表示日志级别非info就不打印-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--日志滚动策略，按照时间进行滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--达到要求后将当前活跃的日志文件以下面的格式进行重命名, %i 表示序号，从0开始依次递增，
            具体含义是如果当天内日志文件达到最大size，则根据当前日期以及序号重名老的日志文件，
            注意若是不配置下面的timeBasedFileNamingAndTriggeringPolicy
            或者 不将上面的 TimeBasedRollingPolicy 换成 SizeAndTimeBasedRollingPolicy 则 ‘%i’ 可能会出现解析错误问题-->
            <!--若文件格式是zip或者gz则会自动压缩，如果不是则不会自动压缩-->
            <fileNamePattern>${LOG_HOME}/${appName}-info-%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!-- 日志总保存量为10GB -->
            <totalSizeCap>10GB</totalSizeCap>
            <!--在根据日期来滚动生成的基础上配置每个日志文件的最大size,如果超出这个size，则重新开启一个新的日志文件，之前老的文件将会被按照上面的命名规则重命名保存下来-->
            <!--
                除了这种配置方式以外，还可以将上面的 rollingPolicy 标签中的class的属性值设置为ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy
                这样的话，就不需要下面的timeBasedFileNamingAndTriggeringPolicy标签了，但是需要在rollingPolicy标签中设置子标签 MaxFileSize
             -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>10MB</MaxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
    </appender>


    <!--日志按照时间滚动生成滚动生成warn级别的日志-->
    <appender name="LOG_FILE_WARN_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定当前活跃的日志文件的名称 -->
        <file>${LOG_HOME}/${appName}-warn.log</file>

        <!--过滤器，以当前配置为例，level配置的是info, onMatch配置的是ACCEPT则表示如果日志级别时info就打印，onMismatch配置的事DENY 则表示日志级别非info就不打印-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--日志滚动策略，按照时间进行滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--达到要求后将当前活跃的日志文件以下面的格式进行重命名, %i 表示序号，从0开始依次递增，
            具体含义是如果当天内日志文件达到最大size，则根据当前日期以及序号重名老的日志文件，
            注意若是不配置下面的timeBasedFileNamingAndTriggeringPolicy
            或者 不将上面的 TimeBasedRollingPolicy 换成 SizeAndTimeBasedRollingPolicy 则 ‘%i’ 可能会出现解析错误问题-->
            <!--若文件格式是zip或者gz则会自动压缩，如果不是则不会自动压缩-->
            <fileNamePattern>${LOG_HOME}/${appName}-warn-%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!-- 日志总保存量为10GB -->
            <totalSizeCap>10GB</totalSizeCap>
            <!--在根据日期来滚动生成的基础上配置每个日志文件的最大size,如果超出这个size，则重新开启一个新的日志文件，之前老的文件将会被按照上面的命名规则重命名保存下来-->
            <!--
                除了这种配置方式以外，还可以将上面的 rollingPolicy 标签中的class的属性值设置为ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy
                这样的话，就不需要下面的timeBasedFileNamingAndTriggeringPolicy标签了，但是需要在rollingPolicy标签中设置子标签 MaxFileSize
             -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>10MB</MaxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
    </appender>



    <!--日志按照时间滚动生成滚动生成error级别的日志-->
    <appender name="LOG_FILE_ERROR_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定当前活跃的日志文件的名称 -->
        <file>${LOG_HOME}/${appName}-error.log</file>

        <!--过滤器，以当前配置为例，level配置的是info, onMatch配置的是ACCEPT则表示如果日志级别时info就打印，onMismatch配置的事DENY 则表示日志级别非info就不打印-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--日志滚动策略，按照时间进行滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--达到要求后将当前活跃的日志文件以下面的格式进行重命名, %i 表示序号，从0开始依次递增，
            具体含义是如果当天内日志文件达到最大size，则根据当前日期以及序号重名老的日志文件，
            注意若是不配置下面的timeBasedFileNamingAndTriggeringPolicy
            或者 不将上面的 TimeBasedRollingPolicy 换成 SizeAndTimeBasedRollingPolicy 则 ‘%i’ 可能会出现解析错误问题-->
            <!--若文件格式是zip或者gz则会自动压缩，如果不是则不会自动压缩-->
            <fileNamePattern>${LOG_HOME}/${appName}-error-%d{yyyy-MM-dd}-%i.log.zip</fileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!-- 日志总保存量为10GB -->
            <totalSizeCap>10GB</totalSizeCap>
            <!--在根据日期来滚动生成的基础上配置每个日志文件的最大size,如果超出这个size，则重新开启一个新的日志文件，之前老的文件将会被按照上面的命名规则重命名保存下来-->
            <!--
                除了这种配置方式以外，还可以将上面的 rollingPolicy 标签中的class的属性值设置为ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy
                这样的话，就不需要下面的timeBasedFileNamingAndTriggeringPolicy标签了，但是需要在rollingPolicy标签中设置子标签 MaxFileSize
             -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>10MB</MaxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </encoder>
    </appender>


    <!-- 异步输出info级别的日志 -->
    <appender name="ASYNC_LOG_FILE_INFO_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志  默认情况下如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="LOG_FILE_INFO_APPENDER"/>
    </appender>

    <appender name="ASYNC_LOG_FILE_WARN_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="LOG_FILE_WARN_APPENDER"/>
    </appender>

    <appender name="ASYNC_LOG_FILE_ERROR_APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="LOG_FILE_ERROR_APPENDER"/>
    </appender>


    <!--
        name: 用来指定受此 logger 约束的某一个包或者具体的某一个类
        level:用来设置打印级别（日志级别），大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，则继承最近的父 logger（该logger需显示定义level,直到rootLogger）的日志级别。
        addtivity: logger 的 appender 默认具有累加性（默认日志输出到当前logger的appender和所有祖先logger的appender中,
                   如果在当前logger 和root中同时配置同一个appender，则日志会打印两遍），
                   可通过配置 “additivity”属性修改默认行为是否向上级loger传递打印信息。默认是true。

        logger的祖先和父子级关系，根据定义循序，上面一个定义的logger是下面一个logger的父级，
        logger的name也可以提现出logger的父子级或者祖先关系，如 name 为x 的logger 是name为x.y的logger和 name为 x.y.z的祖先，同理x.y也是x.y.z的祖先
    -->
    <logger name="org.springframework" level="info"  additivity="false">
        <!--由于additivity="false" 所以对于org.springframework中的日志输出只会在名称为stdout 的appender 中出现，在本文件的配置就是只输出到控制台-->
        <!--<appender-ref ref="STDOUT"/>-->
    </logger>

    <!--使用p6spy打印完整的sql日志-->
    <logger name="com.p6spy.engine.spy.appender.Slf4JLogger" level="debug" additivity="false">
        <!--dditivity="false"，所以没有从祖先或者父级那里继承任何appender，如果不单独引用appender则com.p6spy.engine.spy.appender.Slf4JLogger类下面的日志不会被打印-->
        <!--单独定义了appender-ref,所以即使dditivity="false"  com.p6spy.engine.spy.appender.Slf4JLogger类相关的日志也会输出到  STDOUT appender中-->
        <appender-ref ref="STDOUT"/>
    </logger>
    <!-- 更多常用的三方框架logger配置如下 -->
    <!-- 需要覆盖日志级别,减少不关注的日志输出 -->
    <logger name="sun.rmi" level="error"/>
    <logger name="sun.net" level="error"/>
    <logger name="javax.management" level="error"/>
    <logger name="org.redisson" level="warn"/>
    <logger name="com.zaxxer" level="warn"/>


    <!--root也是<logger>元素，但是它是根logger，是所有logger的祖先，所有包下面的日志都会被记录。可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。-->
    <root level="info" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ASYNC_LOG_FILE_INFO_APPENDER"/>
        <appender-ref ref="ASYNC_LOG_FILE_WARN_APPENDER"/>
        <appender-ref ref="ASYNC_LOG_FILE_ERROR_APPENDER"/>
    </root>

</configuration>
